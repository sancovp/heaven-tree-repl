{
  "app_id": "base_treeshell",
  "domain": "system",
  "role": "assistant",
  "about_app": "Base TreeShell system configuration",
  "about_domain": "Core system operations and management",
  "nodes": {
    "0": {
      "type": "Menu",
      "prompt": "Main Menu",
      "description": "Root menu for base TreeShell",
      "signature": "menu() -> navigation_options",
      "options": {
        "1": "0.0",
        "2": "0.1",
        "3": "0.2",
        "4": "0.6",
        "5": "0.5"
      }
    },
    "0.0": {
      "type": "Menu",
      "prompt": "Settings & Management",
      "description": "System configuration and pathway management",
      "signature": "settings() -> management_options",
      "options": {
        "1": "0.0.1",
        "2": "0.0.2",
        "3": "0.0.3",
        "4": "0.0.4",
        "5": "0.0.5",
        "6": "0.0.6",
        "7": "0.0.7",
        "8": "0.0.8",
        "9": "0.0.9"
      }
    },
    "0.0.1": {
      "type": "Callable",
      "prompt": "Manage Pathways",
      "description": "View and manage saved pathways",
      "signature": "manage_pathways() -> pathway_list",
      "function_name": "_manage_pathways"
    },
    "0.0.2": {
      "type": "Menu",
      "prompt": "Meta Operations",
      "description": "State management and session operations",
      "signature": "meta_operations() -> operation_options",
      "options": {
        "1": "0.0.2.1",
        "2": "0.0.2.2",
        "3": "0.0.2.3",
        "4": "0.0.2.4",
        "5": "0.0.2.5",
        "6": "0.0.2.6",
        "7": "0.0.2.7",
        "8": "0.0.2.8",
        "9": "0.0.2.9",
        "10": "0.0.2.10",
        "11": "0.0.2.11",
        "12": "0.0.2.12",
        "13": "0.0.2.13",
        "14": "0.0.2.14"
      }
    },
    "0.0.2.1": {
      "type": "Callable",
      "prompt": "Save Variable",
      "description": "Store value in session variables",
      "signature": "save_var(name: str, value: any) -> bool",
      "function_name": "_meta_save_var",
      "args_schema": {"name": "str", "value": "any"}
    },
    "0.0.2.2": {
      "type": "Callable",
      "prompt": "Get Variable",
      "description": "Retrieve session variable value",
      "signature": "get_var(name: str) -> any",
      "function_name": "_meta_get_var",
      "args_schema": {"name": "str"}
    },
    "0.0.2.3": {
      "type": "Callable",
      "prompt": "Append to Variable",
      "description": "Append value to existing variable (list/string)",
      "signature": "append_to_var(name: str, value: any) -> bool",
      "function_name": "_meta_append_to_var",
      "args_schema": {"name": "str", "value": "any"}
    },
    "0.0.2.4": {
      "type": "Callable",
      "prompt": "Delete Variable",
      "description": "Remove session variable",
      "signature": "delete_var(name: str) -> bool",
      "function_name": "_meta_delete_var",
      "args_schema": {"name": "str"}
    },
    "0.0.2.5": {
      "type": "Callable",
      "prompt": "List Variables",
      "description": "Show all session variables with values",
      "signature": "list_vars() -> dict",
      "function_name": "_meta_list_vars"
    },
    "0.0.2.6": {
      "type": "Callable",
      "prompt": "Save to File",
      "description": "Write variable value to file",
      "signature": "save_to_file(filename: str, var_name: str) -> bool",
      "function_name": "_meta_save_to_file",
      "args_schema": {"filename": "str", "var_name": "str"}
    },
    "0.0.2.7": {
      "type": "Callable",
      "prompt": "Load from File",
      "description": "Load file content into variable",
      "signature": "load_from_file(filename: str, var_name: str) -> bool",
      "function_name": "_meta_load_from_file",
      "args_schema": {"filename": "str", "var_name": "str"}
    },
    "0.0.2.8": {
      "type": "Callable",
      "prompt": "Export Session",
      "description": "Save complete session state to file",
      "signature": "export_session(filename: str) -> bool",
      "function_name": "_meta_export_session",
      "args_schema": {"filename": "str"}
    },
    "0.0.2.9": {
      "type": "Callable",
      "prompt": "Session Stats",
      "description": "Show session statistics and memory usage",
      "signature": "session_stats() -> dict",
      "function_name": "_meta_session_stats"
    },
    "0.0.2.10": {
      "type": "Callable",
      "prompt": "Add Node",
      "description": "Create new tree nodes. 3 ways for Callable nodes: 1) Import existing: {'import_path': 'module.path', 'import_object': 'function_name'} 2) Dynamic code: {'function_code': 'def _my_func(args): return \"result\", True'} 3) Use existing function: just {'function_name': '_existing_func'}. All Callable nodes need 'type', 'prompt', 'function_name', 'is_async' (true/false).",
      "signature": "add_node(coordinate: str, node_data: dict) -> bool",
      "function_name": "_meta_add_node",
      "args_schema": {"coordinate": "str", "node_data": "dict"}
    },
    "0.0.2.11": {
      "type": "Callable",
      "prompt": "Update Node",
      "description": "Modify an existing node in the tree",
      "signature": "update_node(coordinate: str, updates: dict) -> bool",
      "function_name": "_meta_update_node",
      "args_schema": {"coordinate": "str", "updates": "dict"}
    },
    "0.0.2.12": {
      "type": "Callable",
      "prompt": "Delete Node",
      "description": "Remove a node from the tree structure",
      "signature": "delete_node(coordinate: str) -> bool",
      "function_name": "_meta_delete_node",
      "args_schema": {"coordinate": "str"}
    },
    "0.0.2.13": {
      "type": "Callable",
      "prompt": "List Nodes",
      "description": "Show all nodes in the tree structure",
      "signature": "list_nodes(pattern: str) -> list",
      "function_name": "_meta_list_nodes",
      "args_schema": {"pattern": "str"}
    },
    "0.0.2.14": {
      "type": "Callable",
      "prompt": "Get Node",
      "description": "View details of a specific node",
      "signature": "get_node(coordinate: str) -> dict",
      "function_name": "_meta_get_node",
      "args_schema": {"coordinate": "str"}
    },
    "0.0.3": {
      "type": "Menu",
      "prompt": "🚀 MCP Server Generator",
      "description": "Generate MCP servers from TreeShell applications",
      "signature": "mcp_generator() -> generation_options",
      "options": {
        "1": "0.0.3.1",
        "2": "0.0.3.2",
        "3": "0.0.3.3",
        "4": "0.0.3.4",
        "5": "0.0.3.5"
      }
    },
    "0.0.3.1": {
      "type": "Callable",
      "prompt": "Initialize MCP Config",
      "description": "Create new MCP server configuration",
      "signature": "init_mcp_config(app_name: str, import_path: str, factory_function: str, description: str) -> dict",
      "function_name": "_meta_init_mcp_config",
      "args_schema": {
        "app_name": "str",
        "import_path": "str",
        "factory_function": "str",
        "description": "str"
      }
    },
    "0.0.3.2": {
      "type": "Callable",
      "prompt": "Show MCP Config",
      "description": "Display current MCP server configuration",
      "signature": "show_mcp_config() -> dict",
      "function_name": "_meta_show_mcp_config"
    },
    "0.0.3.3": {
      "type": "Callable",
      "prompt": "Update MCP Config",
      "description": "Modify MCP server configuration settings",
      "signature": "update_mcp_config(updates: dict) -> dict",
      "function_name": "_meta_update_mcp_config",
      "args_schema": {"updates": "dict"}
    },
    "0.0.3.4": {
      "type": "Callable",
      "prompt": "Generate MCP Server",
      "description": "Create complete MCP server package",
      "signature": "generate_mcp_server(output_dir: str) -> dict",
      "function_name": "_meta_generate_mcp_server",
      "args_schema": {"output_dir": "str"}
    },
    "0.0.3.5": {
      "type": "Callable",
      "prompt": "Get Example Config",
      "description": "Show example MCP configuration format",
      "signature": "get_mcp_example_config() -> dict",
      "function_name": "_meta_get_mcp_example_config"
    },
    "0.0.4": {
      "type": "Menu",
      "prompt": "🛠️ OmniTool Access",
      "description": "Access to HEAVEN's 96+ tool ecosystem",
      "signature": "omnitool() -> tool_options",
      "options": {
        "1": "0.0.4.1",
        "2": "0.0.4.2",
        "3": "0.0.4.3"
      }
    },
    "0.0.4.1": {
      "type": "Callable",
      "prompt": "List All Tools",
      "description": "Show all available HEAVEN tools",
      "signature": "list_tools() -> dict",
      "function_name": "_omni_list_tools"
    },
    "0.0.4.2": {
      "type": "Callable",
      "prompt": "Get Tool Info",
      "description": "Get detailed information about a specific tool",
      "signature": "get_tool_info(tool_name: str) -> dict",
      "function_name": "_omni_get_tool_info",
      "args_schema": {"tool_name": "str"}
    },
    "0.0.4.3": {
      "type": "Callable",
      "prompt": "Execute Tool",
      "description": "Execute a HEAVEN tool with parameters",
      "signature": "execute_tool(tool_name: str, parameters: dict) -> dict",
      "function_name": "_omni_execute_tool",
      "args_schema": {
        "tool_name": "str",
        "parameters": "dict"
      }
    },
    "0.0.5": {
      "type": "Callable",
      "prompt": "🔧 Generate TreeShell Tool",
      "description": "Generate HEAVEN agent tool from TreeShell class",
      "signature": "generate_tool(import_string: str, class_name: str, domain?: str, description?: str) -> tool_path",
      "function_name": "_generate_treeshell_tool",
      "args_schema": {
        "import_string": "str",
        "class_name": "str",
        "domain": "str",
        "description": "str"
      }
    },
    "0.0.6": {
      "type": "Menu",
      "prompt": "🧠 Brain Management",
      "description": "Create and manage knowledge brains",
      "signature": "brain_management() -> brain_options",
      "options": {
        "1": "0.0.6.1",
        "2": "0.0.6.2",
        "3": "0.0.6.3",
        "4": "0.0.6.4",
        "5": "0.0.6.5"
      }
    },
    "0.0.6.1": {
      "type": "Callable",
      "prompt": "Setup System Brains",
      "description": "Auto-register core knowledge bases (Local HEAVEN data + TreeShell source)",
      "signature": "setup_system_brains() -> dict",
      "function_name": "_brain_setup_system_brains"
    },
    "0.0.6.2": {
      "type": "Callable",
      "prompt": "Create Brain from GitHub",
      "description": "Clone GitHub repository and register as brain",
      "signature": "create_brain_from_github(github_url: str, brain_name: str) -> dict",
      "function_name": "_brain_create_from_github",
      "args_schema": {
        "github_url": "str",
        "brain_name": "str"
      }
    },
    "0.0.6.3": {
      "type": "Callable",
      "prompt": "Register Local Directory",
      "description": "Register local directory as knowledge brain",
      "signature": "register_local_brain(directory_path: str, brain_name: str) -> dict",
      "function_name": "_brain_register_local",
      "args_schema": {
        "directory_path": "str",
        "brain_name": "str"
      }
    },
    "0.0.6.4": {
      "type": "Callable",
      "prompt": "List All Brains",
      "description": "Show all registered knowledge brains",
      "signature": "list_brains() -> dict",
      "function_name": "_brain_list_all"
    },
    "0.0.6.5": {
      "type": "Callable",
      "prompt": "Remove Brain",
      "description": "Remove brain from registry",
      "signature": "remove_brain(brain_name: str) -> dict",
      "function_name": "_brain_remove",
      "args_schema": {
        "brain_name": "str"
      }
    },
    "0.0.7": {
      "type": "Menu",
      "prompt": "🤖 Brain Agent Query",
      "description": "Query knowledge brains for instructions (iterative deepening supported)",
      "signature": "brain_agent_query() -> query_options",
      "options": {
        "1": "0.0.7.1",
        "2": "0.0.7.2",
        "3": "0.0.7.3",
        "4": "0.0.7.4"
      }
    },
    "0.0.7.1": {
      "type": "Callable",
      "prompt": "Fresh Query",
      "description": "Start new query to a knowledge brain",
      "signature": "fresh_query(brain_name: str, query: str) -> dict",
      "function_name": "_brain_agent_fresh_query",
      "is_async": true,
      "args_schema": {
        "brain_name": "str",
        "query": "str"
      }
    },
    "0.0.7.2": {
      "type": "Callable",
      "prompt": "Deepen Query",
      "description": "Deepen previous query for more detailed understanding",
      "signature": "deepen_query(previous_answer: str, original_query: str) -> dict",
      "function_name": "_brain_agent_deepen_query",
      "is_async": true,
      "args_schema": {
        "previous_answer": "str",
        "original_query": "str"
      }
    },
    "0.0.7.3": {
      "type": "Callable",
      "prompt": "Continue Conversation",
      "description": "Continue brain agent conversation with follow-up",
      "signature": "continue_conversation(brain_name: str, follow_up: str) -> dict",
      "function_name": "_brain_agent_continue",
      "is_async": true,
      "args_schema": {
        "brain_name": "str",
        "follow_up": "str"
      }
    },
    "0.0.7.4": {
      "type": "Callable",
      "prompt": "Show Conversation History",
      "description": "Display brain agent conversation history",
      "signature": "show_history() -> dict",
      "function_name": "_brain_agent_show_history"
    },
    "0.0.8": {
      "type": "Callable",
      "prompt": "📋 List Shortcuts",
      "description": "Show all active shortcuts with details and usage",
      "signature": "list_shortcuts() -> dict",
      "function_name": "_meta_list_shortcuts"
    },
    "0.0.9": {
      "type": "Menu",
      "prompt": "🤖 Automation Management",
      "description": "Schedule = when + if + then, Automation = set of schedules, Master Schedule = all automations",
      "signature": "automation_management() -> automation_options",
      "options": {
        "1": "0.0.9.1",
        "2": "0.0.9.2",
        "3": "0.0.9.3",
        "4": "0.0.9.4",
        "5": "0.0.9.5",
        "6": "0.0.9.6",
        "7": "0.0.9.7",
        "8": "0.0.9.8"
      }
    },
    "0.0.9.1": {
      "type": "Callable",
      "prompt": "Create Schedule",
      "description": "Create single schedule: when (cron) + if (var condition) + then (linguistic structure)",
      "signature": "create_schedule(when: str, if_condition: str, then_action: str, name: str) -> dict",
      "function_name": "_create_schedule",
      "args_schema": {
        "when": "str",
        "if_condition": "str",
        "then_action": "str",
        "name": "str"
      }
    },
    "0.0.9.2": {
      "type": "Callable",
      "prompt": "Create Automation",
      "description": "Create automation (collection of related schedules)",
      "signature": "create_automation(name: str, description: str, schedule_names: list) -> dict",
      "function_name": "_create_automation",
      "args_schema": {
        "name": "str",
        "description": "str",
        "schedule_names": "list"
      }
    },
    "0.0.9.3": {
      "type": "Callable",
      "prompt": "List Schedules",
      "description": "Show all schedules with when/if/then structure",
      "signature": "list_schedules() -> dict",
      "function_name": "_list_schedules"
    },
    "0.0.9.4": {
      "type": "Callable",
      "prompt": "List Automations",
      "description": "Show all automations and their constituent schedules",
      "signature": "list_automations() -> dict",
      "function_name": "_list_automations"
    },
    "0.0.9.5": {
      "type": "Callable",
      "prompt": "Remove Schedule",
      "description": "Remove a single schedule",
      "signature": "remove_schedule(name: str) -> dict",
      "function_name": "_remove_schedule",
      "args_schema": {
        "name": "str"
      }
    },
    "0.0.9.6": {
      "type": "Callable",
      "prompt": "Remove Automation",
      "description": "Remove an entire automation (collection of schedules)",
      "signature": "remove_automation(name: str) -> dict",
      "function_name": "_remove_automation",
      "args_schema": {
        "name": "str"
      }
    },
    "0.0.9.7": {
      "type": "Callable",
      "prompt": "Scheduler Status",
      "description": "Check if scheduler is running and show next execution times",
      "signature": "scheduler_status() -> dict",
      "function_name": "_scheduler_status"
    },
    "0.0.9.8": {
      "type": "Callable",
      "prompt": "Run Automations",
      "description": "Manually trigger automation check and execution",
      "signature": "run_automations() -> dict",
      "function_name": "_run_automations"
    },
    "0.1": {
      "type": "Menu",
      "prompt": "🎯 Domain",
      "description": "Application domain functionality and features",
      "signature": "domain() -> domain_options",
      "options": {}
    },
    "0.2": {
      "type": "Menu",
      "domain": "documentation",
      "prompt": "📚 Documentation",
      "description": "TreeShell documentation and command reference. To read a section, use the number + {} (e.g., '2 {}' to read Execution Syntax). Each section contains detailed guides and examples.",
      "signature": "docs() -> documentation_options",
      "options": {
        "1": "0.2.1",
        "2": "0.2.2",
        "3": "0.2.3",
        "4": "0.2.4",
        "5": "0.2.5",
        "6": "0.2.6",
        "7": "0.2.7",
        "8": "0.2.8",
        "9": "0.2.9",
        "10": "0.2.10"
      }
    },
    "0.2.1": {
      "type": "Callable",
      "prompt": "Execution Syntax",
      "description": "How to execute nodes with different argument patterns",
      "signature": "execution_syntax() -> syntax_guide",
      "function_name": "_docs_execution_syntax"
    },
    "0.2.2": {
      "type": "Callable",
      "prompt": "Callable Nodes",
      "description": "How to create and use callable nodes with 3 implementation approaches",
      "signature": "callable_nodes() -> callable_guide",
      "function_name": "_docs_callable_nodes"
    },
    "0.2.3": {
      "type": "Callable",
      "prompt": "Navigation Commands",
      "description": "Jump, chain, pathways, and other navigation commands",
      "signature": "navigation() -> navigation_guide",
      "function_name": "_docs_navigation"
    },
    "0.2.4": {
      "type": "Callable",
      "prompt": "Pathway System",
      "description": "Recording, saving, and executing pathway templates",
      "signature": "pathways() -> pathway_guide",
      "function_name": "_docs_pathways"
    },
    "0.2.5": {
      "type": "Callable",
      "prompt": "Meta Operations",
      "description": "Session management, variables, and tree structure operations",
      "signature": "meta_operations() -> meta_guide",
      "function_name": "_docs_meta_operations"
    },
    "0.2.6": {
      "type": "Callable",
      "prompt": "Computational Model",
      "description": "How TreeShell achieves Turing completeness through self-modification and agent delegation",
      "signature": "computational_model() -> computational_guide",
      "function_name": "_docs_computational_model"
    },
    "0.2.7": {
      "type": "Callable",
      "prompt": "Shortcuts System",
      "description": "Create semantic aliases for navigation and chain templates with persistent storage",
      "signature": "shortcuts() -> shortcuts_guide",
      "function_name": "_docs_shortcuts"
    },
    "0.5": {
      "type": "Menu",
      "prompt": "🧩 HEAVEN LangGraph Legos",
      "description": "LangGraph node execution and workflow construction",
      "signature": "langgraph_legos() -> langgraph_options",
      "options": {
        "1": "0.5.1",
        "2": "0.5.2",
        "3": "0.5.3",
        "4": "0.5.4"
      }
    },
    "0.5.1": {
      "type": "Callable",
      "prompt": "Execute Graph",
      "description": "Execute a LangGraph workflow",
      "signature": "execute_graph(tool_name: str, parameters: dict) -> result",
      "function_name": "execute_omnitool_graph",
      "import_path": "langgraph_omnitool_executor",
      "import_object": "execute_omnitool_graph",
      "is_async": true,
      "args_schema": {
        "tool_name": "str",
        "parameters": "dict"
      }
    },
    "0.5.2": {
      "type": "Callable",
      "prompt": "Graph Constructor",
      "description": "Build LangGraph workflows visually (future feature)",
      "signature": "graph_constructor() -> constructor_interface",
      "function_name": "graph_constructor",
      "import_path": "langgraph_functions",
      "import_object": "graph_constructor"
    },
    "0.5.3": {
      "type": "Callable",
      "prompt": "List Node Legos",
      "description": "Show available LangGraph node types",
      "signature": "list_node_legos() -> node_types",
      "function_name": "list_node_legos",
      "import_path": "langgraph_functions",
      "import_object": "list_node_legos"
    },
    "0.5.4": {
      "type": "Callable",
      "prompt": "List Graph Templates",
      "description": "Show available workflow templates (future feature)",
      "signature": "list_graph_templates() -> templates",
      "function_name": "list_graph_templates",
      "import_path": "langgraph_functions",
      "import_object": "list_graph_templates"
    },
    "0.6": {
      "type": "Menu",
      "prompt": "📝 Linguistic Structures",
      "description": "Hierarchy tracking: Word → Sentence → Paragraph → Page → Chapter → Book → Volume",
      "signature": "linguistic_structures() -> structure_options",
      "options": {
        "1": "0.6.1",
        "2": "0.6.2",
        "3": "0.6.3",
        "4": "0.6.4"
      }
    },
    "0.6.1": {
      "type": "Callable",
      "prompt": "Track Structures",
      "description": "Auto-classify and track linguistic structures in session",
      "signature": "track_structures(enabled: bool) -> dict",
      "function_name": "_track_linguistic_structures",
      "args_schema": {
        "enabled": "bool"
      }
    },
    "0.6.2": {
      "type": "Callable",
      "prompt": "Classify Command",
      "description": "Classify a command into linguistic hierarchy",
      "signature": "classify_command(command: str) -> dict",
      "function_name": "_classify_linguistic_command",
      "args_schema": {
        "command": "str"
      }
    },
    "0.6.3": {
      "type": "Callable",
      "prompt": "View Hierarchy",
      "description": "Show current linguistic structure hierarchy",
      "signature": "view_hierarchy() -> dict",
      "function_name": "_view_linguistic_hierarchy"
    },
    "0.6.4": {
      "type": "Callable",
      "prompt": "Structure Stats",
      "description": "Statistics on linguistic structure usage",
      "signature": "structure_stats() -> dict",
      "function_name": "_linguistic_structure_stats"
    },
    "0.2.8": {
      "type": "Callable",
      "prompt": "Function Signatures & Auto-Documentation",
      "description": "How TreeShell automatically extracts and displays function signatures and docstrings",
      "signature": "function_signatures() -> signature_guide",
      "function_name": "_docs_function_signatures"
    },
    "0.2.9": {
      "type": "Callable",
      "prompt": "Templating System & Variable Injection", 
      "description": "Complete guide to args_schema templating: $variables and {$variable} string formatting",
      "signature": "templating_system() -> templating_guide",
      "function_name": "_docs_templating_system"
    },
    "0.2.10": {
      "type": "Callable",
      "prompt": "Import Resolution System",
      "description": "How TreeShell resolves and imports functions: import_path, import_object, and function_code",
      "signature": "import_resolution() -> import_guide", 
      "function_name": "_docs_import_resolution"
    }
  }
}