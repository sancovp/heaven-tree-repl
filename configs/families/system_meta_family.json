{
  "family_root": "system_meta",
  "domain": "system_meta",
  "description": "State management and session operations",
  "nodes": {
    "system_meta": {
      "type": "Menu",
      "prompt": "Meta Operations",
      "description": "State management and session operations",
      "signature": "meta_operations() -> operation_options",
      "legacy_coordinate": "0.0.2",
      "options": {
        "1": "save_var",
        "2": "get_var",
        "3": "append_to_var",
        "4": "delete_var",
        "5": "list_vars",
        "6": "save_to_file",
        "7": "load_from_file",
        "8": "export_session",
        "9": "session_stats",
        "10": "add_node",
        "11": "update_node",
        "12": "delete_node",
        "13": "list_nodes",
        "14": "get_node"
      }
    },
    "save_var": {
      "type": "Callable",
      "prompt": "Save Variable",
      "description": "Store value in session variables",
      "signature": "save_var(name: str, value: any) -> bool",
      "function_name": "_meta_save_var",
      "args_schema": {
        "name": "str",
        "value": "any"
      },
      "legacy_coordinate": "0.0.2.1"
    },
    "get_var": {
      "type": "Callable",
      "prompt": "Get Variable",
      "description": "Retrieve session variable value",
      "signature": "get_var(name: str) -> any",
      "function_name": "_meta_get_var",
      "args_schema": {
        "name": "str"
      },
      "legacy_coordinate": "0.0.2.2"
    },
    "append_to_var": {
      "type": "Callable",
      "prompt": "Append to Variable",
      "description": "Append value to existing variable (list/string)",
      "signature": "append_to_var(name: str, value: any) -> bool",
      "function_name": "_meta_append_to_var",
      "args_schema": {
        "name": "str",
        "value": "any"
      },
      "legacy_coordinate": "0.0.2.3"
    },
    "delete_var": {
      "type": "Callable",
      "prompt": "Delete Variable",
      "description": "Remove session variable",
      "signature": "delete_var(name: str) -> bool",
      "function_name": "_meta_delete_var",
      "args_schema": {
        "name": "str"
      },
      "legacy_coordinate": "0.0.2.4"
    },
    "list_vars": {
      "type": "Callable",
      "prompt": "List Variables",
      "description": "Show all session variables with values",
      "signature": "list_vars() -> dict",
      "function_name": "_meta_list_vars",
      "legacy_coordinate": "0.0.2.5"
    },
    "save_to_file": {
      "type": "Callable",
      "prompt": "Save to File",
      "description": "Write variable value to file",
      "signature": "save_to_file(filename: str, var_name: str) -> bool",
      "function_name": "_meta_save_to_file",
      "args_schema": {
        "filename": "str",
        "var_name": "str"
      },
      "legacy_coordinate": "0.0.2.6"
    },
    "load_from_file": {
      "type": "Callable",
      "prompt": "Load from File",
      "description": "Load file content into variable",
      "signature": "load_from_file(filename: str, var_name: str) -> bool",
      "function_name": "_meta_load_from_file",
      "args_schema": {
        "filename": "str",
        "var_name": "str"
      },
      "legacy_coordinate": "0.0.2.7"
    },
    "export_session": {
      "type": "Callable",
      "prompt": "Export Session",
      "description": "Save complete session state to file",
      "signature": "export_session(filename: str) -> bool",
      "function_name": "_meta_export_session",
      "args_schema": {
        "filename": "str"
      },
      "legacy_coordinate": "0.0.2.8"
    },
    "session_stats": {
      "type": "Callable",
      "prompt": "Session Stats",
      "description": "Show session statistics and memory usage",
      "signature": "session_stats() -> dict",
      "function_name": "_meta_session_stats",
      "legacy_coordinate": "0.0.2.9"
    },
    "add_node": {
      "type": "Callable",
      "prompt": "Add Node",
      "description": "Create new tree nodes. 3 ways for Callable nodes: 1) Import existing: {'import_path': 'module.path', 'import_object': 'function_name'} 2) Dynamic code: {'function_code': 'def _my_func(args): return \"result\", True'} 3) Use existing function: just {'function_name': '_existing_func'}. All Callable nodes need 'type', 'prompt', 'function_name', 'is_async' (true/false).",
      "signature": "add_node(coordinate: str, node_data: dict) -> bool",
      "function_name": "_meta_add_node",
      "args_schema": {
        "coordinate": "str",
        "node_data": "dict"
      },
      "legacy_coordinate": "0.0.2.10"
    },
    "update_node": {
      "type": "Callable",
      "prompt": "Update Node",
      "description": "Modify an existing node in the tree",
      "signature": "update_node(coordinate: str, updates: dict) -> bool",
      "function_name": "_meta_update_node",
      "args_schema": {
        "coordinate": "str",
        "updates": "dict"
      }
    },
    "delete_node": {
      "type": "Callable",
      "prompt": "Delete Node",
      "description": "Remove a node from the tree structure",
      "signature": "delete_node(coordinate: str) -> bool",
      "function_name": "_meta_delete_node",
      "args_schema": {
        "coordinate": "str"
      }
    },
    "list_nodes": {
      "type": "Callable",
      "prompt": "List Nodes",
      "description": "Show all nodes in the tree structure",
      "signature": "list_nodes(pattern: str) -> list",
      "function_name": "_meta_list_nodes",
      "args_schema": {
        "pattern": "str"
      }
    },
    "get_node": {
      "type": "Callable",
      "prompt": "Get Node",
      "description": "View details of a specific node",
      "signature": "get_node(coordinate: str) -> dict",
      "function_name": "_meta_get_node",
      "args_schema": {
        "coordinate": "str"
      }
    },
    "show_config_paths": {
      "type": "Callable",
      "prompt": "Show Config Paths",
      "description": "Display paths to all active configuration files organized by type (HEAVEN_DATA_DIR vs library defaults)",
      "signature": "show_config_paths() -> dict",
      "function_name": "_meta_show_config_paths",
      "args_schema": {}
    }
  }
}